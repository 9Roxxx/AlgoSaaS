import { Controller, Get, Post, Body, Param, HttpCode, HttpStatus } from '@nestjs/common';

export class CreateContactDto {
  phone?: string;
  tgId?: string;
  vkUserId?: string;
  email?: string;
  city?: string;
  childAge?: number;
  interests?: Record<string, any>;
}

export class CreateTemplateDto {
  channel: 'TELEGRAM' | 'VK' | 'EMAIL' | 'SMS' | 'WHATSAPP';
  name: string;
  body: string;
  variables?: string[];
  category?: 'VALUE_FIRST' | 'OFFER' | 'SERVICE';
}

export class CreateConsentDto {
  contactId: string;
  channel: 'TELEGRAM' | 'VK' | 'EMAIL' | 'SMS' | 'WHATSAPP';
  scope: 'PROMO' | 'SERVICE';
  source: 'FORM' | 'QR' | 'C2WA' | 'TG_START' | 'VK_SUB' | 'IMPORT';
}

@Controller('demo')
export class DemoController {
  constructor() {}

  // ============================================================================
  // CONTACTS MANAGEMENT
  // ============================================================================

  @Get('contacts')
  async getContacts() {
    // –î–µ–º–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î)
    return {
      success: true,
      contacts: [
        {
          id: 'contact_1',
          phone: '+79001234567',
          tgId: '123456789',
          email: 'parent1@example.com',
          city: '–ú–æ—Å–∫–≤–∞',
          childAge: 10,
          interests: { tracks: ['python'], trialBooked: false },
          createdAt: new Date().toISOString(),
        },
        {
          id: 'contact_2',
          phone: '+79007654321',
          tgId: '987654321',
          email: 'parent2@example.com',
          city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          childAge: 12,
          interests: { tracks: ['scratch'], trialBooked: true },
          createdAt: new Date().toISOString(),
        },
        {
          id: 'contact_3',
          phone: '+79005555555',
          tgId: '555666777',
          email: 'parent3@example.com',
          city: '–ú–æ—Å–∫–≤–∞',
          childAge: 8,
          interests: { tracks: ['python', 'scratch'], trialBooked: false },
          createdAt: new Date().toISOString(),
        },
      ],
    };
  }

  @Post('contacts')
  @HttpCode(HttpStatus.CREATED)
  async createContact(@Body() dto: CreateContactDto) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const contact = {
      id: 'contact_' + Date.now(),
      ...dto,
      createdAt: new Date().toISOString(),
    };

    return {
      success: true,
      message: 'Contact created successfully',
      contact,
    };
  }

  // ============================================================================
  // TEMPLATES MANAGEMENT
  // ============================================================================

  @Get('templates')
  async getTemplates() {
    // –î–µ–º–æ —à–∞–±–ª–æ–Ω—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î)
    return {
      success: true,
      templates: [
        {
          id: 'template_1',
          channel: 'TELEGRAM',
          name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ Python –∫—É—Ä—Å',
          body: '–ü—Ä–∏–≤–µ—Ç, {{parent_name}}! üëã\n\n–í–∞—à —Ä–µ–±–µ–Ω–æ–∫ {{child_age}} –ª–µ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å Python! üêç\n\nüéØ –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ä–µ–±–µ–Ω–æ–∫:\n‚Ä¢ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\n\nüìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: {{trial_link}}',
          variables: ['parent_name', 'child_age', 'trial_link'],
          category: 'VALUE_FIRST',
          status: 'APPROVED',
        },
        {
          id: 'template_2',
          channel: 'TELEGRAM',
          name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ',
          body: '{{parent_name}}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ –∑–∞–≤—Ç—Ä–∞ –≤ {{time}}! ‚è∞\n\nüìç –ê–¥—Ä–µ—Å: {{address}}\nüë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {{teacher_name}}\n\n–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∑–∞—Ä–∞–Ω–µ–µ üôè',
          variables: ['parent_name', 'time', 'address', 'teacher_name'],
          category: 'SERVICE',
          status: 'APPROVED',
        },
        {
          id: 'template_3',
          channel: 'EMAIL',
          name: 'Email –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          body: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Algoritmika!\n\n–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {{parent_name}},\n\n–í–∞—à —Ä–µ–±–µ–Ω–æ–∫ {{child_age}} –ª–µ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Algoritmika',
          variables: ['parent_name', 'child_age'],
          category: 'VALUE_FIRST',
          status: 'APPROVED',
        },
      ],
    };
  }

  @Post('templates')
  @HttpCode(HttpStatus.CREATED)
  async createTemplate(@Body() dto: CreateTemplateDto) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    const template = {
      id: 'template_' + Date.now(),
      ...dto,
      version: 1,
      status: 'DRAFT',
      createdAt: new Date().toISOString(),
    };

    return {
      success: true,
      message: 'Template created successfully',
      template,
    };
  }

  @Post('templates/:id/render')
  @HttpCode(HttpStatus.OK)
  async renderTemplate(@Param('id') id: string, @Body() variables: Record<string, any>) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞
    const templates = {
      template_1: '–ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞! üëã\n\n–í–∞—à —Ä–µ–±–µ–Ω–æ–∫ 10 –ª–µ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å Python! üêç\n\nüéØ –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ä–µ–±–µ–Ω–æ–∫:\n‚Ä¢ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\n\nüìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: https://algoritmika.org/trial',
      template_2: '–ê–Ω–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00! ‚è∞\n\nüìç –ê–¥—Ä–µ—Å: —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 12\nüë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n\n–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∑–∞—Ä–∞–Ω–µ–µ üôè',
      template_3: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Algoritmika!\n\n–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) –ê–Ω–Ω–∞,\n\n–í–∞—à —Ä–µ–±–µ–Ω–æ–∫ 10 –ª–µ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Algoritmika',
    };

    return {
      success: true,
      rendered: templates[id] || 'Template not found',
      variables,
    };
  }

  // ============================================================================
  // CONSENTS MANAGEMENT
  // ============================================================================

  @Get('consents')
  async getConsents() {
    // –î–µ–º–æ —Å–æ–≥–ª–∞—Å–∏—è
    return {
      success: true,
      consents: [
        {
          id: 'consent_1',
          contactId: 'contact_1',
          channel: 'TELEGRAM',
          scope: 'PROMO',
          source: 'TG_START',
          policyVersion: '2024-01',
          createdAt: new Date().toISOString(),
        },
        {
          id: 'consent_2',
          contactId: 'contact_2',
          channel: 'EMAIL',
          scope: 'PROMO',
          source: 'FORM',
          policyVersion: '2024-01',
          createdAt: new Date().toISOString(),
        },
      ],
    };
  }

  @Post('consents')
  @HttpCode(HttpStatus.CREATED)
  async createConsent(@Body() dto: CreateConsentDto) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
    const consent = {
      id: 'consent_' + Date.now(),
      ...dto,
      policyVersion: '2024-01',
      createdAt: new Date().toISOString(),
    };

    return {
      success: true,
      message: 'Consent created successfully',
      consent,
    };
  }

  // ============================================================================
  // REAL TELEGRAM BOT SETUP
  // ============================================================================

  @Post('telegram/setup')
  @HttpCode(HttpStatus.OK)
  async setupTelegramBot(@Body() body: { botToken: string; webhookUrl?: string }) {
    // –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
    const { botToken, webhookUrl } = body;

    if (!botToken) {
      return {
        success: false,
        message: 'Bot token is required',
      };
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î

    const botInfo = {
      id: '123456789',
      username: 'algor_test_bot',
      first_name: 'Algor Test Bot',
      can_join_groups: true,
      can_read_all_group_messages: false,
      supports_inline_queries: false,
    };

    return {
      success: true,
      message: 'Telegram bot configured successfully',
      botInfo,
      webhookUrl: webhookUrl || 'https://your-domain.com/api/v1/webhooks/telegram',
      instructions: [
        '1. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        '2. Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        '3. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
        '4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start',
      ],
    };
  }

  @Post('telegram/send-real')
  @HttpCode(HttpStatus.OK)
  async sendRealTelegramMessage(@Body() body: { 
    botToken: string; 
    chatId: string; 
    message: string; 
    templateId?: string;
    variables?: Record<string, any>;
  }) {
    const { botToken, chatId, message, templateId, variables } = body;

    if (!botToken || !chatId || !message) {
      return {
        success: false,
        message: 'Bot token, chat ID and message are required',
      };
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
    // const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({
    //     chat_id: chatId,
    //     text: message,
    //     parse_mode: 'HTML'
    //   })
    // });

    // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const result = {
      messageId: Date.now(),
      chatId,
      text: message,
      timestamp: new Date().toISOString(),
      status: 'sent',
    };

    return {
      success: true,
      message: 'Message sent successfully',
      result,
      note: '–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram Bot API',
    };
  }
}
