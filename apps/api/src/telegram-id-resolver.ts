import * as fs from 'fs';
import * as path from 'path';

/**
 * TelegramIdResolver - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç @username –≤ numeric ID
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export class TelegramIdResolver {
  private botToken: string;
  private mappingFile: string;
  private usernameMap: Map<string, number> = new Map();

  constructor(botToken: string) {
    this.botToken = botToken;
    this.mappingFile = path.join(process.cwd(), 'telegram-mapping.json');
    this.loadMapping();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   */
  private loadMapping(): void {
    try {
      if (fs.existsSync(this.mappingFile)) {
        const data = fs.readFileSync(this.mappingFile, 'utf-8');
        const mapping = JSON.parse(data);
        this.usernameMap = new Map(Object.entries(mapping));
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.usernameMap.size} –º–∞–ø–ø–∏–Ω–≥–æ–≤ Telegram ID`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥:`, error);
      this.usernameMap = new Map();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –≤ —Ñ–∞–π–ª
   */
  private saveMapping(): void {
    try {
      const mapping = Object.fromEntries(this.usernameMap);
      fs.writeFileSync(this.mappingFile, JSON.stringify(mapping, null, 2));
      console.log(`üíæ –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${this.usernameMap.size} –∑–∞–ø–∏—Å–µ–π)`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞:`, error);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ username ‚Üí numeric_id
   */
  addMapping(username: string, numericId: number): void {
    const cleanUsername = username.replace('@', '').toLowerCase();
    this.usernameMap.set(cleanUsername, numericId);
    this.saveMapping();
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: @${cleanUsername} ‚Üí ${numericId}`);
  }

  /**
   * –ò—â–µ—Ç numeric ID –≤ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ username
   */
  private findInMapping(username: string): number | null {
    const cleanUsername = username.replace('@', '').toLowerCase();
    return this.usernameMap.get(cleanUsername) || null;
  }

  /**
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç @username –∏–ª–∏ numeric_id –≤ numeric_id
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞!
   */
  async resolveId(input: string): Promise<number> {
    console.log(`üîç –†–∞–∑—Ä–µ—à–∞–µ–º Telegram ID: ${input}`);

    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ numeric ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    if (/^\d+$/.test(input)) {
      console.log(`‚úÖ –≠—Ç–æ numeric ID: ${input}`);
      return parseInt(input);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–≥—Ä—É–ø–ø–∞)
    if (/^-\d+$/.test(input)) {
      console.log(`‚úÖ –≠—Ç–æ group ID: ${input}`);
      return parseInt(input);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ @username
    if (input.startsWith('@')) {
      const username = input.replace('@', '').toLowerCase();
      
      // –®–∞–≥ 1: –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞–ø–ø–∏–Ω–≥–µ
      const mappedId = this.findInMapping(username);
      if (mappedId) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ: @${username} ‚Üí ${mappedId}`);
        return mappedId;
      }

      // –®–∞–≥ 2: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Telegram API (getChat)
      try {
        console.log(`üåê –ò—â–µ–º –≤ Telegram API: @${username}`);
        const chatId = await this.getChatIdFromUsername(username);
        
        if (chatId) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
          this.addMapping(username, chatId);
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Telegram API: @${username} ‚Üí ${chatId}`);
          return chatId;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Telegram API:`, error);
      }

      // –®–∞–≥ 3: –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      throw new Error(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è @${username}\n\n` +
        `–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:\n` +
        `1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ numeric Chat ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5540862911)\n` +
        `2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n` +
        `3. –ù–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É —á—Ç–æ–±—ã –æ–Ω –≤–∞—Å "–Ω–∞—à–µ–ª"\n\n` +
        `–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å numeric ID:\n` +
        `‚Üí –û—Ç–∫—Ä–æ–π—Ç–µ Telegram\n` +
        `‚Üí –ù–∞–π–¥–∏—Ç–µ @userinfobot\n` +
        `‚Üí –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n` +
        `‚Üí –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID`
      );
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
    throw new Error(
      `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID: "${input}"\n\n` +
      `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n` +
      `‚Ä¢ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @myusername)\n` +
      `‚Ä¢ Numeric ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5540862911)\n` +
      `‚Ä¢ Group ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -123456789)`
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç numeric Chat ID –∏–∑ @username —á–µ—Ä–µ–∑ Telegram Bot API
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ getChat()
   */
  private async getChatIdFromUsername(username: string): Promise<number | null> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${this.botToken}/getChat`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ chat_id: `@${username}` }),
        }
      );

      const data = await response.json();

      if (data.ok && data.result?.id) {
        console.log(`‚úÖ Telegram API –≤–µ—Ä–Ω—É–ª ID: ${data.result.id}`);
        return data.result.id;
      }

      if (!data.ok) {
        console.error(`‚ùå Telegram API –æ—à–∏–±–∫–∞: ${data.description}`);
        return null;
      }

      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ getChat:`, error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º update –æ—Ç Telegram
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  updateFromTelegramUpdate(update: any): void {
    try {
      let user = null;

      // –ü–æ–ª—É—á–∞–µ–º user –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ updates
      if (update.message?.from) {
        user = update.message.from;
      } else if (update.callback_query?.from) {
        user = update.callback_query.from;
      } else if (update.edited_message?.from) {
        user = update.edited_message.from;
      }

      if (user?.username && user?.id) {
        console.log(`üì® Update –æ—Ç Telegram: @${user.username} (${user.id})`);
        this.addMapping(user.username, user.id);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞:`, error);
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–ø–ø–∏–Ω–≥–∞
   */
  getStats(): { total: number; usernames: string[] } {
    return {
      total: this.usernameMap.size,
      usernames: Array.from(this.usernameMap.keys()),
    };
  }
}
