import { Job, Queue } from 'bullmq';
import { prisma, Channel } from '@algor/db';
import { generateDedupeKey } from '@algor/shared';
import Redis from 'ioredis';

const redisConnection = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  password: process.env.REDIS_PASSWORD,
  maxRetriesPerRequest: null,
});

const sendMessageQueue = new Queue('send-message', { connection: redisConnection });

interface CampaignDispatchJob {
  tenantId: string;
  campaignId: string;
  segmentId: string;
  templateIds: string[];
  waveSize: number;
}

export async function campaignDispatchProcessor(job: Job<CampaignDispatchJob>) {
  const { tenantId, campaignId, segmentId, templateIds, waveSize } = job.data;

  console.log(`üì§ Dispatching campaign ${campaignId} for segment ${segmentId}`);

  // 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞
  const segment = await prisma.segment.findFirst({
    where: { id: segmentId, tenantId },
  });

  if (!segment) {
    throw new Error('Segment not found');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–∞
  const filter = JSON.parse(segment.filterDsl);
  const where: any = { tenantId };

  if (filter.city) where.city = filter.city;
  if (filter.childAge) where.childAge = filter.childAge;
  if (filter['interests.trialBooked'] !== undefined) {
    where.interests = {
      path: ['trialBooked'],
      equals: filter['interests.trialBooked'],
    };
  }

  const contacts = await prisma.contact.findMany({
    where,
    take: waveSize,
    include: {
      consents: {
        where: { revokedAt: null },
      },
      suppressions: true,
    },
  });

  console.log(`üìä Found ${contacts.length} contacts in segment`);

  // 2. –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
  const templates = await prisma.template.findMany({
    where: {
      id: { in: templateIds },
      tenantId,
    },
  });

  const templatesByChannel: Record<Channel, any> = {} as any;
  templates.forEach((t) => {
    templatesByChannel[t.channel] = t;
  });

  // 3. –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏
  let messagesCreated = 0;

  for (const contact of contacts) {
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const availableChannels: Channel[] = [];

    if (contact.tgId) availableChannels.push(Channel.TELEGRAM);
    if (contact.vkUserId) availableChannels.push(Channel.VK);
    if (contact.email) availableChannels.push(Channel.EMAIL);
    if (contact.phone) {
      availableChannels.push(Channel.SMS);
      availableChannels.push(Channel.WHATSAPP);
    }

    // –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∏–∑ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ default)
    const channelPriority: Channel[] = [
      Channel.WHATSAPP,
      Channel.TELEGRAM,
      Channel.VK,
      Channel.EMAIL,
      Channel.SMS,
    ];

    let selectedChannel: Channel | null = null;

    for (const ch of channelPriority) {
      if (availableChannels.includes(ch) && templatesByChannel[ch]) {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
        const hasConsent = contact.consents.some(
          (c) => c.channel === ch && c.scope === 'PROMO'
        );

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        const isSuppressed = contact.suppressions.some(
          (s) => s.channel === null || s.channel === ch
        );

        if (hasConsent && !isSuppressed) {
          selectedChannel = ch;
          break;
        }
      }
    }

    if (!selectedChannel) {
      console.log(`‚ö†Ô∏è  Contact ${contact.id}: no available channel`);
      continue;
    }

    const template = templatesByChannel[selectedChannel];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è dedupe key
    const dedupeKey = generateDedupeKey(tenantId, campaignId, contact.id, selectedChannel);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const existing = await prisma.message.findUnique({
      where: { dedupeKey },
    });

    if (existing) {
      console.log(`‚ö†Ô∏è  Message already exists: ${dedupeKey}`);
      continue;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
    const variables = {
      parent_name: '–†–æ–¥–∏—Ç–µ–ª—å', // TODO: –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      child_age: contact.childAge || 10,
      city: contact.city || '–ú–æ—Å–∫–≤–∞',
      track: 'Python',
      slots: '–í—Ç 16:00, –ß—Ç 18:00',
    };

    // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await prisma.message.create({
      data: {
        tenantId,
        campaignId,
        contactId: contact.id,
        channel: selectedChannel,
        templateId: template.id,
        payload: variables,
        dedupeKey,
        status: 'QUEUED',
      },
    });

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    await sendMessageQueue.add('send', {
      messageId: message.id,
      tenantId,
      contactId: contact.id,
      channel: selectedChannel,
      templateId: template.id,
      variables,
    });

    messagesCreated++;
  }

  console.log(`‚úÖ Created ${messagesCreated} messages for campaign ${campaignId}`);

  return { messagesCreated };
}

