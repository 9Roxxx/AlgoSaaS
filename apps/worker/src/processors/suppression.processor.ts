import { Job } from 'bullmq';
import { prisma } from '@algor/db';

interface SuppressionJob {
  tenantId: string;
  contactId: string;
  channel?: string | null;
  reason: string;
}

export async function suppressionProcessor(job: Job<SuppressionJob>) {
  const { tenantId, contactId, channel, reason } = job.data;

  console.log(`üö´ Processing suppression for contact ${contactId}`);

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å Suppress
  await prisma.suppress.create({
    data: {
      tenantId,
      contactId,
      channel: channel as any,
      reason,
    },
  });

  // –û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ channel != null)
  if (channel) {
    await prisma.consent.updateMany({
      where: {
        tenantId,
        contactId,
        channel: channel as any,
        revokedAt: null,
      },
      data: {
        revokedAt: new Date(),
      },
    });
  } else {
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ - –æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è
    await prisma.consent.updateMany({
      where: {
        tenantId,
        contactId,
        revokedAt: null,
      },
      data: {
        revokedAt: new Date(),
      },
    });
  }

  console.log(`‚úÖ Suppression processed for contact ${contactId}`);

  return { success: true };
}

