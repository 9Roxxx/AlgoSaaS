import { PrismaClient, Channel, ConsentScope, ConsentSource, TemplateStatus, TemplateCategory, UserRole, TenantStatus } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º seed...');

  // 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
  const tenant = await prisma.tenant.upsert({
    where: { id: 'tenant-algoritmika-demo' },
    update: {},
    create: {
      id: 'tenant-algoritmika-demo',
      name: '–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞ –î–µ–º–æ',
      status: TenantStatus.ACTIVE,
    },
  });
  console.log('‚úÖ Tenant —Å–æ–∑–¥–∞–Ω:', tenant.name);

  // 2. –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞
  const hashedPassword = await bcrypt.hash('admin123', 10);
  const user = await prisma.user.upsert({
    where: { 
      tenantId_email: {
        tenantId: tenant.id,
        email: 'admin@algoritmika.demo'
      }
    },
    update: {},
    create: {
      tenantId: tenant.id,
      email: 'admin@algoritmika.demo',
      password: hashedPassword,
      role: UserRole.OWNER,
    },
  });
  console.log('‚úÖ User —Å–æ–∑–¥–∞–Ω:', user.email);

  // 3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  const contacts = await Promise.all([
    prisma.contact.upsert({
      where: { 
        tenantId_phone: {
          tenantId: tenant.id,
          phone: '+79161234567'
        }
      },
      update: {},
      create: {
        tenantId: tenant.id,
        phone: '+79161234567',
        email: 'anna.petrova@example.com',
        tgId: '123456789',
        city: '–ú–æ—Å–∫–≤–∞',
        childAge: 9,
        interests: { tracks: ['python', 'scratch'], trialBooked: false },
      },
    }),
    prisma.contact.upsert({
      where: { 
        tenantId_phone: {
          tenantId: tenant.id,
          phone: '+79167654321'
        }
      },
      update: {},
      create: {
        tenantId: tenant.id,
        phone: '+79167654321',
        email: 'ivan.ivanov@example.com',
        vkUserId: 'vk_987654321',
        city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        childAge: 11,
        interests: { tracks: ['unity', 'roblox'], trialBooked: false },
      },
    }),
    prisma.contact.upsert({
      where: { 
        tenantId_phone: {
          tenantId: tenant.id,
          phone: '+79169999999'
        }
      },
      update: {},
      create: {
        tenantId: tenant.id,
        phone: '+79169999999',
        email: 'maria.smirnova@example.com',
        tgId: '555555555',
        city: '–ú–æ—Å–∫–≤–∞',
        childAge: 10,
        interests: { tracks: ['python', 'gamedev'], trialBooked: false },
      },
    }),
  ]);
  console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', contacts.length);

  // 4. –°–æ–∑–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏—è
  for (const contact of contacts) {
    if (contact.tgId) {
      await prisma.consent.upsert({
        where: {
          tenantId_contactId_channel_scope: {
            tenantId: tenant.id,
            contactId: contact.id,
            channel: Channel.TELEGRAM,
            scope: ConsentScope.PROMO,
          }
        },
        update: {},
        create: {
          tenantId: tenant.id,
          contactId: contact.id,
          channel: Channel.TELEGRAM,
          scope: ConsentScope.PROMO,
          source: ConsentSource.TG_START,
          policyVersion: '2024-01',
          proofUrl: 'https://storage.example.com/consents/tg_start_screenshot.png',
        },
      });
    }

    if (contact.email) {
      await prisma.consent.upsert({
        where: {
          tenantId_contactId_channel_scope: {
            tenantId: tenant.id,
            contactId: contact.id,
            channel: Channel.EMAIL,
            scope: ConsentScope.PROMO,
          }
        },
        update: {},
        create: {
          tenantId: tenant.id,
          contactId: contact.id,
          channel: Channel.EMAIL,
          scope: ConsentScope.PROMO,
          source: ConsentSource.FORM,
          policyVersion: '2024-01',
          proofUrl: 'https://storage.example.com/consents/email_form_screenshot.png',
        },
      });
    }

    if (contact.vkUserId) {
      await prisma.consent.upsert({
        where: {
          tenantId_contactId_channel_scope: {
            tenantId: tenant.id,
            contactId: contact.id,
            channel: Channel.VK,
            scope: ConsentScope.PROMO,
          }
        },
        update: {},
        create: {
          tenantId: tenant.id,
          contactId: contact.id,
          channel: Channel.VK,
          scope: ConsentScope.PROMO,
          source: ConsentSource.VK_SUB,
          policyVersion: '2024-01',
        },
      });
    }
  }
  console.log('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ–∑–¥–∞–Ω—ã');

  // 5. –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: 2 value, 2 offer, 1 service)
  const templates = [
    // VALUE-FIRST —à–∞–±–ª–æ–Ω—ã
    {
      channel: Channel.TELEGRAM,
      name: 'TG: –ß–µ–∫-–ª–∏—Å—Ç –ø–æ Python',
      body: `–ü—Ä–∏–≤–µ—Ç, {{parent_name}}! üêç

–°–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å —á–µ–∫-–ª–∏—Å—Ç: 5 —à–∞–≥–æ–≤, –∫–∞–∫ –ø–æ–º–æ—á—å —Ä–µ–±—ë–Ω–∫—É {{child_age}} –ª–µ—Ç –æ—Å–≤–æ–∏—Ç—å Python:

‚úÖ –ù–∞—á–Ω–∏—Ç–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–≥—Ä–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (CodeCombat)
‚úÖ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–≤–µ—Å—Ç)
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å —á–µ—Ä–µ–∑ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
‚úÖ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ 30-40 –º–∏–Ω—É—Ç

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –≤ {{city}}: https://algoritmika.org/trial

–†–µ–∫–ª–∞–º–∞. –û–û–û ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞¬ª. algoritmika.org
–û—Ç–ø–∏—Å–∞—Ç—å—Å—è: /stop`,
      variables: ['parent_name', 'child_age', 'city'],
      category: TemplateCategory.VALUE_FIRST,
    },
    {
      channel: Channel.EMAIL,
      name: 'Email: –ú–∏–Ω–∏-—É—Ä–æ–∫ Scratch',
      body: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{parent_name}}!

üìö –ú–∏–Ω–∏-—É—Ä–æ–∫ –¥–ª—è –¥–µ—Ç–µ–π {{child_age}} –ª–µ—Ç: —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –≤ Scratch

Scratch ‚Äî —ç—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ó–∞ 20 –º–∏–Ω—É—Ç –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!

üéÆ –ß—Ç–æ –º—ã —Å–æ–∑–¥–∞–¥–∏–º:
- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
- –£–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –°–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤
- –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

üìπ –í–∏–¥–µ–æ-—É—Ä–æ–∫: https://algoritmika.org/scratch-lesson
üìù –ö–æ–Ω—Å–ø–µ–∫—Ç: https://algoritmika.org/scratch-guide

–ü—Ä–æ–±—É–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞

---
–†–µ–∫–ª–∞–º–∞. –û–û–û ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞¬ª. algoritmika.org
–û—Ç–ø–∏—Å–∞—Ç—å—Å—è: {{unsubscribe_link}}`,
      variables: ['parent_name', 'child_age', 'unsubscribe_link'],
      category: TemplateCategory.VALUE_FIRST,
    },

    // OFFER —à–∞–±–ª–æ–Ω—ã
    {
      channel: Channel.WHATSAPP,
      name: 'WA: –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ Python',
      body: `–ü—Ä–∏–≤–µ—Ç, {{parent_name}}! üëã

üéì –ü—Ä–∏–≥–ª–∞—à–∞–µ–º {{child_age}}-–ª–µ—Ç–Ω–µ–≥–æ —é–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ Python –≤ {{city}}!

üóì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:
{{slots}}

–ù–∞ —É—Ä–æ–∫–µ —Ä–µ–±—ë–Ω–æ–∫:
‚ú® –°–æ–∑–¥–∞—Å—Ç —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
‚ú® –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
‚ú® –ü–æ–ª—É—á–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è

üìç –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 –º–∏–Ω—É—Ç

–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ: https://algoritmika.org/trial?track={{track}}

–†–µ–∫–ª–∞–º–∞. –û–û–û ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞¬ª. algoritmika.org`,
      variables: ['parent_name', 'child_age', 'city', 'slots', 'track'],
      category: TemplateCategory.OFFER,
    },
    {
      channel: Channel.VK,
      name: 'VK: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
      body: `{{parent_name}}, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! üéÅ

üî• –°–∫–∏–¥–∫–∞ 30% –Ω–∞ –∫—É—Ä—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π {{child_age}} –ª–µ—Ç –≤ {{city}}

–¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏! –£—Å–ø–µ–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:
üêç Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –≤ Unity
ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ Arduino

–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:
‚úÖ 32 –∑–∞–Ω—è—Ç–∏—è (4 –º–µ—Å—è—Ü–∞)
‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ 8 –ø—Ä–æ–µ–∫—Ç–æ–≤
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞

–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–æ —Å–∫–∏–¥–∫–æ–π: https://vk.cc/algoritmika_promo

–†–µ–∫–ª–∞–º–∞. –û–û–û ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞¬ª. algoritmika.org
–û—Ç–ø–∏—Å–∞—Ç—å—Å—è: –Ω–∞–ø–∏—à–∏—Ç–µ –°–¢–û–ü`,
      variables: ['parent_name', 'child_age', 'city'],
      category: TemplateCategory.OFFER,
    },

    // SERVICE —à–∞–±–ª–æ–Ω
    {
      channel: Channel.SMS,
      name: 'SMS: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ',
      body: `{{parent_name}}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º: –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ {{track}} –∑–∞–≤—Ç—Ä–∞ –≤ {{time}}. –ê–¥—Ä–µ—Å: {{address}}. –í–æ–ø—Ä–æ—Å—ã: +7 (495) 123-45-67. –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞`,
      variables: ['parent_name', 'track', 'time', 'address'],
      category: TemplateCategory.SERVICE,
    },
  ];

  for (const tpl of templates) {
    await prisma.template.create({
      data: {
        tenantId: tenant.id,
        channel: tpl.channel,
        name: tpl.name,
        body: tpl.body,
        variables: tpl.variables,
        status: TemplateStatus.APPROVED,
        category: tpl.category,
      },
    });
  }
  console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã:', templates.length);

  // 6. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
  const segment = await prisma.segment.create({
    data: {
      tenantId: tenant.id,
      name: '–ú–æ—Å–∫–≤–∞, 9-12 –ª–µ—Ç, –±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π',
      filterDsl: JSON.stringify({
        city: '–ú–æ—Å–∫–≤–∞',
        childAge: { gte: 9, lte: 12 },
        'interests.trialBooked': false,
      }),
    },
  });
  console.log('‚úÖ –°–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', segment.name);

  // 7. –°–æ–∑–¥–∞—Ç—å YAML –ø–æ–ª–∏—Ç–∏–∫—É
  const yamlPolicy = `channels:
  priority: [whatsapp, telegram, vk, email, sms]
  quiet_hours:
    start: "20:00"
    end: "10:00"
    tz_by_contact: true
  promo_cadence:
    per_contact_hours: 48
    max_per_week: 2

whatsapp:
  mode: hybrid
  sender_pools:
    - id: alg-ru-01
      max_rate_per_min: 60
      jitter_seconds: [2, 12]
  template_policy:
    require_approved_templates: true
    mix: { value_first: 2, offer: 1 }
  stop_triggers:
    complaint_rate: 0.003
    undelivered_rate: 0.08
  fallback_after_minutes: 180

telegram:
  sender_pools:
    - id: tg-bot-main
      max_rate_per_min: 30
      jitter_seconds: [1, 5]

vk:
  sender_pools:
    - id: vk-community-main
      max_rate_per_min: 20
      jitter_seconds: [3, 8]

email:
  sender_pools:
    - id: mailgun-primary
      max_rate_per_min: 100
      jitter_seconds: [0, 2]

sms:
  sender_pools:
    - id: sms-provider-main
      max_rate_per_min: 50
      jitter_seconds: [1, 3]

compliance:
  require_opt_in: true
  ad_label_required: true
  global_suppress_on_stop: true
  consent_ledger_fields: [channel, scope, source, timestamp, policy_version, proof_url]
`;

  const rule = await prisma.orchestrationRule.create({
    data: {
      tenantId: tenant.id,
      yaml: yamlPolicy,
      version: 1,
      isActive: true,
    },
  });
  console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞');

  console.log('\nüéâ Seed –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n');
  console.log('üìß –õ–æ–≥–∏–Ω: admin@algoritmika.demo');
  console.log('üîë –ü–∞—Ä–æ–ª—å: admin123\n');
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

